
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId      String         @unique
  email        String         @unique
  firstname    String?        @unique
  lastname     String?        @unique
  createdAt    DateTime       @default(now())
  subscription Subscription?
  integrations Integrations[]
  automations  Automation[]
}

model Subscription {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String @default("Untitled")
  plan       SUBSCRIPTION_PLAN @default(FREE)     
  createdAt    DateTime @default(now())
  active       Boolean @default(false)
  User         User?     @relation(fields: [userId], references: [id] ,onDelete: Cascade)
  userId       String?   @unique @db.Uuid
}

model Automation {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  active    Boolean   @default(false)

  createdAt    DateTime @default(now())
  listener  Listener?
  posts     Post[]
  dms       Dms[]
  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?   @db.Uuid
  keywords  Keyword[]
  triggers  Trigger[]
} 

model Integrations {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         INTEGRATIONS @default(INSTAGRAM)
  createdAt    DateTime @default(now())
  token        String
  User        User?    @relation(fields: [userId], references: [id])
  userId       String? @db.Uuid
  expiresAt    DateTime?
  instagramId    String? @unique
}

model Dms{
 id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation   Automation? @relation(fields: [automationId], references: [id])
  automationId String?     @db.Uuid
  createdAt    DateTime    @default(now())
  senderId     String?
  reciever     String?
  message      String?
}
model Post {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mediaType    MEDIATYPE @default(IMAGE)
  media     String
  caption      String?
  // createdAt    DateTime @default(now())
  Automation   Automation? @relation(fields: [automationId], references: [id])
  automationId String?     @db.Uuid
}

model Listener{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation Automation @relation(fields: [automationId], references: [id] , onDelete: Cascade)
  automationId String @unique @db.Uuid
  listener LISTENERS @default(MESSAGE)
  prompt String
  commentReply String?
  dmReply Int @default(0)
  commentCount Int @default(0)
}
model Trigger{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type String
  triggerValue String 
  Automation Automation? @relation(fields: [automationId], references: [id] , onDelete: Cascade)  
  automationId String? @db.Uuid
}
model Keyword {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word      String
  Automation   Automation? @relation(fields: [automationId], references: [id])
  automationId String?     @db.Uuid

  @@unique([automationId , word])
}
enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}

enum INTEGRATIONS {
  INSTAGRAM
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CAROSEL_ALBUM
}

enum LISTENERS {
  SMARTAI
  MESSAGE
}